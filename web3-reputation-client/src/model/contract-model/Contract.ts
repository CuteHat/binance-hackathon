/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ServiceProviderCreated = ContractEventLog<{
  provider: [string, string, string, string, string, string, boolean];
  ranks: [string, string, string, string][];
  criterias: [string, string, string, string, string, string][];
  0: [string, string, string, string, string, string, boolean];
  1: [string, string, string, string][];
  2: [string, string, string, string, string, string][];
}>;
export type TokenLeveledUp = ContractEventLog<{
  tokenId: string;
  serviceProviderId: string;
  tokenRank: string;
  uri: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TokenPurchased = ContractEventLog<{
  userAddress: string;
  tokenId: string;
  serviceProviderId: string;
  rank: string;
  uri: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type XpPushed = ContractEventLog<{
  tokenId: string;
  serviceProviderId: string;
  criteriaId: string;
  added: string;
  totalValue: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface Contract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Contract;
  clone(): Contract;
  methods: {
    NFT(): NonPayableTransactionObject<string>;

    criteriaId(): NonPayableTransactionObject<string>;

    criterias(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      id: string;
      name: string;
      description: string;
      weight: string;
      min: string;
      max: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    levelUp(
      _tokenId: number | string | BN,
      _serviceProviderId: number | string | BN,
      _serviceProviderRankingIds: (number | string | BN)[],
      uri: string
    ): NonPayableTransactionObject<void>;

    mint(
      _serviceProviderId: number | string | BN,
      uri: string
    ): NonPayableTransactionObject<void>;

    pushXp(
      _tokenId: number | string | BN,
      _serviceProviderId: number | string | BN,
      _criteriaId: number | string | BN,
      value: number | string | BN
    ): NonPayableTransactionObject<void>;

    rankId(): NonPayableTransactionObject<string>;

    ranks(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      id: string;
      level: string;
      xpFrom: string;
      name: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    registerProvider(
      _name: string,
      _description: string,
      _websiteURL: string,
      _criterias: [
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ][],
      _ranks: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string
      ][]
    ): NonPayableTransactionObject<void>;

    serviceProviderId(): NonPayableTransactionObject<string>;

    serviceProviders(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      name: string;
      owner: string;
      description: string;
      websiteURL: string;
      registeredTimestamp: string;
      isActive: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    tokenId(): NonPayableTransactionObject<string>;

    tokenRanks(arg0: number | string | BN): NonPayableTransactionObject<string>;

    xps(arg0: number | string | BN): NonPayableTransactionObject<string>;
  };
  events: {
    ServiceProviderCreated(cb?: Callback<ServiceProviderCreated>): EventEmitter;
    ServiceProviderCreated(
      options?: EventOptions,
      cb?: Callback<ServiceProviderCreated>
    ): EventEmitter;

    TokenLeveledUp(cb?: Callback<TokenLeveledUp>): EventEmitter;
    TokenLeveledUp(
      options?: EventOptions,
      cb?: Callback<TokenLeveledUp>
    ): EventEmitter;

    TokenPurchased(cb?: Callback<TokenPurchased>): EventEmitter;
    TokenPurchased(
      options?: EventOptions,
      cb?: Callback<TokenPurchased>
    ): EventEmitter;

    XpPushed(cb?: Callback<XpPushed>): EventEmitter;
    XpPushed(options?: EventOptions, cb?: Callback<XpPushed>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ServiceProviderCreated",
    cb: Callback<ServiceProviderCreated>
  ): void;
  once(
    event: "ServiceProviderCreated",
    options: EventOptions,
    cb: Callback<ServiceProviderCreated>
  ): void;

  once(event: "TokenLeveledUp", cb: Callback<TokenLeveledUp>): void;
  once(
    event: "TokenLeveledUp",
    options: EventOptions,
    cb: Callback<TokenLeveledUp>
  ): void;

  once(event: "TokenPurchased", cb: Callback<TokenPurchased>): void;
  once(
    event: "TokenPurchased",
    options: EventOptions,
    cb: Callback<TokenPurchased>
  ): void;

  once(event: "XpPushed", cb: Callback<XpPushed>): void;
  once(event: "XpPushed", options: EventOptions, cb: Callback<XpPushed>): void;
}
